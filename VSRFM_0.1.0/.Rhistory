reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F & vasc$fecha.unificada %in% reuma$fecha.unificada == F) print('i')
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
print(i)
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
print(i)
print(reuma$fecha.unificada[reuma$fecha.unificada %in% vasc$fecha.unificada==F])
print(vasc$fecha.unificada[vasc$fecha.unificada %in% reuma$fecha.unificada==F])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
print(i)
print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
print(i)
print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
print(reuma$fecha[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
print(i)
print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
tablas.reuma<-tablas.reuma[-which(tablas.reuma$fecha.unificada==reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]),]
tablas.vascular<-tablas.vascular[-which(tablas.vascular$fecha.unificada==vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]),]
}
}
load("~/Escritorio/Proyecto_reuma/Datos.proyecto.reuma.RData")
nip<-tabla.basal$nip
tablas.reuma<-tablas.reuma[which(tablas.reuma$nip %in% nip ==TRUE),]
tablas.vascular<-tablas.vascular[which(tablas.vascular$nip %in% nip ==TRUE),]
nip<-tablas.vascular$nip
tabla.basal<-tabla.basal[which(tabla.basal$nip%in%nip==T),]
tablas.reuma<-tablas.reuma[which(tablas.reuma$nip%in%nip==T),]
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
print(tablas.reuma[-which(tablas.reuma$fecha.unificada==reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]),])
print(tablas.vascular[-which(tablas.vascular$fecha.unificada==vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]),])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
#print(tablas.reuma[-which(tablas.reuma$fecha.unificada==reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]),])
print(tablas.vascular[-which(tablas.vascular$fecha.unificada==vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]),])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
print(tablas.reuma[-which(tablas.reuma$fecha.unificada==reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]),])
#print(tablas.vascular[-which(tablas.vascular$fecha.unificada==vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]),])
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
valor1=reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]
#print(tablas.reuma[-which(tablas.reuma$fecha.unificada==valor1),])
valor2=vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]
#print(tablas.vascular[-which(tablas.vascular$fecha.unificada==valor2),])
print(valor1)
#print(valor2)
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
valor1=reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]
#print(tablas.reuma[-which(tablas.reuma$fecha.unificada==valor1),])
#valor2=vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]
print(tablas.vascular[-which(tablas.vascular$fecha.unificada==valor2),])
#print(valor1)
#print(valor2)
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
valor1=reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]
#print(tablas.reuma[-which(tablas.reuma$fecha.unificada==valor1),])
#valor2=vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]
print(tablas.vascular[-which(tablas.vascular$nip==i & tablas.vascular$fecha.unificada==valor2),])
#print(valor1)
#print(valor2)
}
}
for (i in nip){
reuma<-tablas.reuma[which(tablas.reuma$nip==i),]
vasc<-tablas.vascular[which(tablas.vascular$nip==i),]
#if (dim(reuma)[1]!=dim(vasc)[1])print(i)
if (reuma$fecha.unificada %in% vasc$fecha.unificada==F | vasc$fecha.unificada %in% reuma$fecha.unificada == F){
#print(i)
#print(which(reuma$fecha.unificada %in% vasc$fecha.unificada==F))
#print(reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)])
#print(which(vasc$fecha.unificada %in% reuma$fecha.unificada==F))
#print(vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)])
valor1=reuma$fecha.unificada[which(reuma$fecha.unificada %in% vasc$fecha.unificada==F)]
#print(tablas.reuma[-which(tablas.reuma$fecha.unificada==valor1),])
valor2=vasc$fecha.unificada[which(vasc$fecha.unificada %in% reuma$fecha.unificada==F)]
print(tablas.vascular[-which(tablas.vascular$nip==i & tablas.vascular$fecha.unificada==valor2),])
#print(valor1)
#print(valor2)
}
}
for (i in 1:dim(tablas.reuma)){
for (j in 1:dim(tablas.vascular)){
if (tablas.vascular$nip[j]==tablas.reuma$nip[i]){
print(tablas.reuma$nip[i])
}
}
}
for (i in 1:dim(tablas.reuma)){
for (j in 1:dim(tablas.vascular)){
if (tablas.vascular$nip[j]==tablas.reuma$nip[i]){
print(tablas.reuma$nip[j])
}
}
}
gim<-read.csv('~/Escritorio/Datos.vascular.csv')
View(gim)
gim<-read.csv('~/Escritorio/Datos.vascular.csv')
gim<-gim[1:1326,]
load("~/Escritorio/Daros.reuma.RData")
nip<-unique(tabla$nip)
gim<-gim[which(gim$nip %in% nip),]
View(tabla)
tabla<tabla[,-c(58:61)]
tabla<tabla[,-c(58)]
tabla<tabla[,-58]
tabla<-tabla[,-c(58:61)]
save.image("~/Escritorio/Datos.reuma.RData")
AS.Date(gim$fecha, "%d/%m/%Y")
As.Date(gim$fecha, "%d/%m/%Y")
as.Date(gim$fecha, "%d/%m/%Y")
As.Date(gim$fecha, "%m/%d/%Y")
as.Date(gim$fecha, "%m/%d/%Y")
gim$fecha.unificada<-as.Date(gim$fecha, "%m/%d/%Y")
gim<-gim[,c(1,7,2:6)]
tabla2<-merge(tabla, gim, by=c(1,2))
tabla2<-merge(tabla, gim)
tabla2<-merge(tabla, gim,by.x = tabla$nip)
tabla2<-merge(tabla, gim,by.x = c(1,2))
tabla2<-merge(tabla, gim,by = c(1,2),all.y = T)
View(tabla2)
tabla2<-merge(tabla, gim,by = c(1,2), all = T)
save.image("~/Escritorio/Datos.reuma.RData")
nip<-unique(tabla$nip)
gim<-gim[which(gim$nip %in% nip),]
merge(tabla,gim)
merge(gim, tabla)
merge(gim, tabla, by=c(1,2))
tabla2<-merge(gim, tabla, by=c(1,2))
table(tabla2)
tabla2<-tabla2[,-]
tabla2<-tabla2[,-49]
save.image("~/Escritorio/Datos.reuma.RData")
load("~/Escritorio/Datos.reuma.RData")
tabla2<-merge(gim, tabla, by=c(1,2))
load("~/Escritorio/Datos.reuma.RData")
load("~/Escritorio/Daros.reuma.RData")
gim<-read.csv('~/Escritorio/Datos.vascular.csv')
nip<-unique(tabla$nip)
gim<-gim[which(gim$nip %in% nip),]
tabla2<-merge()
gim<-read.csv('~/Escritorio/Datos.vascular.csv')
nip<-unique(tabla$nip)
gim<-gim[which(gim$nip %in% nip),]
tabla2<-merge(gim, tabla, by=c(1,2))
gim$fecha.unificada<-as.Date(gim$fecha, "%m/%d/%Y")
gim<-gim[,c(1,7,2:6)]
merge(gim,tabla,by=c(1,2))
tabla2<-merge(gim,tabla,by=c(1,2))
View(tabla2)
tabla2<-tabla2[-2,]
write.csv(table2, '~/Escritorio/Proyecto_reuma/tabla.datos.reuma.project.csv', row.names = F)
write.csv(tabla2, '~/Escritorio/Proyecto_reuma/tabla.datos.reuma.project.csv', row.names = F)
save.image("~/Escritorio/Datos.reuma.RData")
View(tabla2)
names(tabla2)
shiny::runApp('Escritorio/ANOT_EXOM')
10+4+7+15+1+2+14+3+1
22/57
runApp('Escritorio/ANOT_EXOM')
file.path('~')
direc<-'~'
fn<-list.files(direc)
fn
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
runApp('Escritorio/ANOT_EXOM')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(help='VariantAnnotation')
source("https://bioconductor.org/biocLite.R")
biocLite("ensemblVEP")
VSRFM()
VSRFM()
model.rf
VSRFM()
a=read.table('~/Escritorio/tabla.tsv', sep = '\t',dec = '.', header = T)
View(a)
a=a[,-12]
VSRFM(a)
a=read.table('~/Escritorio/tabla.tsv', sep = '\t',dec = '.', header = T)
VSRFM(a)
library(randomForest)
a=read.table('~/Escritorio/tabla.tsv', sep = '\t',dec = '.', header = T)
a=a[,-12]
VSRFM(a)
VSRFM(a[1,])
a=read.table('~/Escritorio/tabla.tsv', sep = '\t',dec = '.', header = T)
VSRFM(a[1,])
a=a[,-12]
VSRFM(a[1,])
load("~/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
library(shiny)
library(shinyFiles)
library(randomForest)
library(randomForest)
save.image("~/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
runApp()
runApp()
a=read.table('~/Escritorio/tabla2.tsv', sep = '\t',dec = '.', header = T)
View(a)
runApp()
shiny::runApp()
library(VSRFM)
length(which(clinvar_NS$gnomAD_AF==0))
length(which(clinvar_splice$gnomAD_AF==0))
length(which(table.model.NS$gnomAD_AF==0))
length(which(table.model.splicing$gnomAD_AF==0))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('png')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::tags
shiny::tags$style()
?shiny::tags$style
?shiny::tags$style()
runApp()
runApp()
runApp()
runApp()
runApp()
VSRFM()
load("/home/bioinfo/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
VSRFM()
VSRFM()
VSRFM()
load("/home/bioinfo/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
VSRFM()
predict(model.rf.splicing, data)
VSRFMs <- function(data){
prediction <- predict(model.rf.splicing, data)
return(prediction)
}
VSRFM()
VSRFMs <- function(data){
prediction <- predict(model.rf.splicing, data)
return(prediction)
}
VSRFM()
VSRFM <- function(data){
prediction <- predict(model.rf, data)
return(prediction)
}
VSRFM()
VSRFM <- function(data){
table <- data
prediction <- predict(model.rf, table)
return(prediction)
}
VSRFM()
save.image("~/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
load("~/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
VSRFM()
VSRFMs()
VSRFMs <- function(data){
table <- data
prediction <- predict(model.rf.splicing, table)
return(prediction)
}
VSRFMs()
save.image("~/Documentos/VSRFM/VSRFM_v1.0/VSRFM.RData")
load("/home/bioinfo/.cache/.fr-X3yAyJ/VSRFM/data/clinvar_splice.RData")
VSRFM()
VSRFM(clinvar_splice)
load("/home/bioinfo/.cache/.fr-GWsUYp/VSRFM/data/table.model.splicing.RData")
load("/home/bioinfo/.cache/.fr-XaROID/VSRFM/data/clinvar_NS.RData")
load("/home/bioinfo/.cache/.fr-ghHrTS/VSRFM/data/VSRFM.RData")
library('randomForest')
# This function compute VSRFM score for not splice variants in a dataframe with VSRFM constituent scores:
# 1) gnomAD_AF
# 2) CADD_PHRED
# 3) Condel
# 4) DANN_score
# 5) MetaLR_score
# 6) MetaSVM_score
# 7) REVEL_score
# 8) phastCons100way_vertebrate
# 9) phastCons20way_mammalian
# 10) phyloP100way_vertebrate
# 11) phyloP20way_mammalian
VSRFM <- function(data){
table <- data
prediction <- predict(model.rf, table)
return(prediction)
}
# This function compute VSRFMs score for splice variants in a dataframe with VSRFM constituent scores:
# 1) gnomAD_AF
# 2) CADD_PHRED
# 3) Condel
# 4) DANN_score
# 5) MetaLR_score
# 6) MetaSVM_score
# 7) REVEL_score
# 8) phastCons100way_vertebrate
# 9) phastCons20way_mammalian
# 10) phyloP100way_vertebrate
# 11) phyloP20way_mammalian
# 12) ada_score
# 13) rf_score
VSRFMs <- function(data){
table <- data
prediction <- predict(model.rf.splicing, table)
return(prediction)
}
save.image("~/Documentos/VSRFM/VSRFM_0.1.0.tar.gz.RData")
load("/home/bioinfo/Documentos/VSRFM/VSRFM/data/VSRFM.RData")
load("/home/bioinfo/.cache/.fr-aqgZwk/VSRFM/data/VSRFM.RData")
VSRFM()
install.packages("~/Documentos/VSRFM/VSRFM_0.1.0.tar.gz", repos = NULL, type = "source")
library('VSRFM')
library(VSRFM)
load("/home/bioinfo/Escritorio/VSRFM/data/VSRFM.RData")
library('randomForest')
# This function compute VSRFM score for not splice variants in a dataframe with VSRFM constituent scores:
# 1) gnomAD_AF
# 2) CADD_PHRED
# 3) Condel
# 4) DANN_score
# 5) MetaLR_score
# 6) MetaSVM_score
# 7) REVEL_score
# 8) phastCons100way_vertebrate
# 9) phastCons20way_mammalian
# 10) phyloP100way_vertebrate
# 11) phyloP20way_mammalian
VSRFM <- function(data){
table <- data
prediction <- predict(model.rf, table)
return(prediction)
}
# This function compute VSRFMs score for splice variants in a dataframe with VSRFM constituent scores:
# 1) gnomAD_AF
# 2) CADD_PHRED
# 3) Condel
# 4) DANN_score
# 5) MetaLR_score
# 6) MetaSVM_score
# 7) REVEL_score
# 8) phastCons100way_vertebrate
# 9) phastCons20way_mammalian
# 10) phyloP100way_vertebrate
# 11) phyloP20way_mammalian
# 12) ada_score
# 13) rf_score
VSRFMs <- function(data){
table <- data
prediction <- predict(model.rf.splicing, table)
return(prediction)
}
save.image("~/Escritorio/VSRFM/data/VSRFM.RData")
VSRFM()
